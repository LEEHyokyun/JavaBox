- review
ㅁ 시스템의 기본 단위는 object, 객체이다.
	* object이 모여 하나의 component를 이룬다.
	* 객체의 상호작용을 통해 application이 작동한다.
		→ 응집도(자신의 역할에 집중)는 높고 결합도(의존성)은 낮다.
	* 기능을 모듈화, 세분화하여 한 기능이 고장난다면 그 부분만 디버깅한다.
	
- OOP 주요 개념 중 Encapsulation
	ㅁ "public interface, private implementation" .. 인터페이스는 공개하고 구현부는 감춘다는 개념이 핵심.
	* 하나의 모듈마다 "보호막"이 있어야 하는데, 소통할 수 있는 항목을 별도로 구성하고 구현부와 따로 구현한다는 개념이다.
	* 인터페이스(공개)와 구현부(비밀)를 별도로 구현하는 과정
	* 이러한 과정을 일컬어 추상화라고도 한다.
	* java bean, Spring bean 개념과 연결
	ㅁ Encapsulation의 이유, 목적
	* Information hiding(정보은닉)을 통한 정보보호
	* 사용자 관점에서, 구현부까지 인지할 필요없이 인터페이스만 인지한다면 구현부 모두 사용가능하다(생산성 증가).
	* 공급자 관점에서, 구현부를 계속 업데이트 되어도 인터페이스는 그대로 유지된다(유지보수 및 관리).
	ㅁ 이외 OOP의 중요 개념은 Inheritance, Polymorphism
	
- getter, setter method
	ㅁ private 인스턴스 변수를 설정한 후, 해당 변수를 외부에서 할당 및 접근하기 위해 정의하는 메소드
	* getter - 사용하는 측에서 해당 객체의 정보를 확보하고자 할 때
		ex)
			public String getPassword(){
				return password;
			}
	* setter - 사용하는 측에서 해당 객체의 정보를 할당하고자 할 때
		ex)
			public String setPassword(String password){
				this.password = password;
			}
	ㅁ this 키워드
	* 현재 실행중인 객체를 가르키는 자바 키워드
	* this.password : 객체의 인스턴스 변수를 가르킨다
	* 인자와 클래스 변수 명이 같을때, 구분하기 위해 사용
- Constructor(생성자)
	ㅁ 말 그대로 객체를 생성하는, 객체를 생성하는 인자이다.
	* 객체 생성시(=new) 실행되는 클래스의 구성요소
	ㅁ 특징
	*클래스 내에 생성자를 명시하지 않는다면 컴파일시 자동으로 기본 생성자가 삽입된다.
	*별도의 객체 초기화 작업이 필요하다면, 생성자를 직접 명시해줘야 한다.
	*생성자는 클래스 명과 동일하다.
		ㄴ ex) new Person(); ---> class Person{Person()}
	* new 연산자를 통해 생성자가 만들어져야(생성되어야), 객체가 생성되고 메모리에 적재된다.
	ㅁ 객체 생성 시 기본적으로 생성자가 생성된다.
	* 기본생성자는 명시하지 않을경우 기본적으로 생성
	* 객체초기화작업(객체 생성 시 별도 작업이 필요한 경우)이 필요할 경우 생성자를 직접 명기한다.
		ㄴ 생성자에 인자를 전달하면서, 객체가 생성될때 해당 인자가 변수에 할당될 수 있도록 설정
		 
		
- Java Data Type
	ㅁ 기본형(primitive type, 어느 언어에서나 기본적으로 제공하는 데이터 타입)
		데이터 사이즈 책정가능, 최소-최대범위가 존재한다.
		boolean, char, long or int, float or double
			ㄴ 		1byte 	2byte 	4byte 	8byte
		 정수형		byte   short  int*     long
		 실수형						float*	double
	 	 문지형				char
		 논리형		boolean
		 *long, float는 data type을 구별하기 위해 데이터 마지막에 영어를 덧붙힌다.
		 
	ㅁ 참조형(Reference type)
		데이터 사이즈를 책정할 수 없을때, 개체에 저장하고 "참조"하는 방식이기 때문
		객체를 참조하는 변수의 타입(*독자적인 메모리 영역인 heap에 저장)
		
		String name = "봄"; > String역시 크기를 책정할 수 없는 참조형 데이터타입
		Person p = new Person(); > Person도 역시 참조형 데이터타입
		*이때 p를 참조형 변수라 지칭한다.
		*Person은 참조형 데이터타입이다.
		
	ㅁ String은 데이터 타입이 아니다.
		기본형이 아니므로 참조형이다.
		문자열을 저장하기 위한 참조형 타입이자, 클래스의 일종이다.
		(내부적으로는 객체로 저장)
		
	ㅁ 기본적으로 참조형 type은 객체를 생성하기 위한 데이터 타입이다.
		(데이터 타입에 맞게)객체가 만들어지면서 heap 메모리에 적재, 참조변수가 이를 참조하는 형태
	
	ㅁ heap은 참조형 타입의 데이터가 저장되는 동적 메모리 영역이다.
	
	ㅁ 참조변수는 최종적으로, heap에 적재된 후 생성자가 생성된 메모리 주소를 참조한다.
		ㄴ 이때 p = p2를 통해, 다른 참조변수가 할당하고 있는 메모리 주소를 할당받을 경우엔
			ㄴ p는 최종적으로 p2객체 생성자의 메모리 주소를 참조하게 되므로, p2객체 정보를 참조
			ㄴ 이때 주소를 참조받지 않는(사용하지 않는) 기존 p2 객체는 garbage collection의 대상이되어 정리된다.
	
	*Java SE API 공식문서 참조할것!
	
- 연산자(Operator)
	ㅁ 사칙연산
	ㅁ 비교연산
	ㅁ 할당
	ㅁ 증감연산(++k : 증가후 실행, k++ : 실행후 증가, 마이너스도 마찬가지)
	ㅁ 삼항연산( (조건식)? 식1:식2 ) -> 조건이 참일때 식1을 수행하고, 거짓일때 식2를 수행한다.
	ㅁ 자주사용하는 연산(a=a+b > a+=b, 마이너스도 마찬가지)
	ㅁ 참고(비교연산자의 연산자 2개사용과 1개사용)
		&& : false를 만나는 순간 연산 종료, false 반환
		& : false를 만나더라도 항목이 끝날때 까지 연산을 지속, 그 이후에 false 반환
		
- 조건문
	ㅁ if
	ㅁ switch - case
	
- 입력객체
	import java.util.Scanner;
	Scanner s = new Scanner();
	s.nextInt();
	s.close();

**3일차 주요목차**
	ㅁ 제어문 - switch case
	ㅁ 제어문 - 반복문 for / while / do while
	ㅁ 객체 초기화 단계
	ㅁ 변수의 종류와 범위
	ㅁ UML class Diagram
	ㅁ Class Diagram의 Relationship