ㅁ Java 자료구조(Collection, Set, List)
	ㅁ ※ set, list 자체가 하나의 인스턴스 변수로 될 수 있다!
	ㅁ Set
		ㅁ 중복을 허용하지 않고 인덱싱이 존재하지 않는다(정렬).
		ㅁ TreeSet > 정렬한다(기본)
		ㅁ LinkedListSet > 입력한 순서를 기억한다
	ㅁ List
		ㅁ 중복을 허용하고 인덱싱이 존재한다.
		ㅁ ArrayList > 검색이 용이하다
		ㅁ LinkedList > 등록 및 삭제가 용이하다

ㅁ Generic
	ㅁ type이 명확하지 않은 상태에서 요소의 type을 지정한다.
	ㅁ type 안전성 보장 및 객체 캐스팅 절차를 감소
	ㅁ generic을 사용하지 않을 경우, object type 상관없이 인자로 전달가능
		ㄴ 그러나 권장하지 않는다.
	ㅁ 부모 data type을 generic으로도 사용할 수 있다!!
		ㄴ ArrayList<Animal> list = new ArrayList<Animal>();
			ㄴ Animal type의, 해당 계층구조의 객체만 전달 가능
	ㅁ ex)
		list.add(new Friend("아이유", 30));
		* 현재 list에 전달되는 인자는, generic이 안된 상태이다.
		* 따라서 Object type에서 자식객체를 바라보는 overcasting 상태
		* 이에 따라 list.get(0)이 바라보는 객체는 Object이므로, 해당 자식객체의 메소드를 사용하기 위해선 down casting이 별도로 필요!
			ㄴ 즉, Object o = list.get(0); -> ((Friend) o).getName();
		* generic을 한다면 별도 casting 없이도 바로 접근가능

ㅁ java.util.List
	ㅁ 인덱스, 즉 순번관리를 할 수 있는 배열의 일종이다.
	ㅁ ArrayList
		* 인덱스관리, 검색에 용이하다.
	ㅁ LinkedList
		* 인덱스관리, 추가 및 삭제에 용이하다.
		
ㅁ method Signature
	ㅁ abstract method는 선언만 가능한 것을 의미한다.
	ㅁ 즉, 구체화없이 정의만 하는 것을 지칭한다.
	
※ toString - 정보를 얻고자 하는 대상의 class 모두에게 삽입한다!
ㄴ VO,,,abstract / Child 모두에게 삽입!

※ 기본적인 VO, Service, model에 대한 경로구성

ㅁ 경로
	1) VO(model) - service - Test(main)
	2) VO(model) - service - TDD
		ㄴ 각 기능별 method 호출 및 사용문을 작성하고, TDD package 내부에서 service class 작성 및 method 정의
		ㄴ 그 후 TDD 모두 확인 후, 각 service class를 model or service package에서 merge. 
	3) VO(model, service) - TDD
		ㄴ 위와 동일.
	
	※ 
	

ㅁ method 작성시 주요 유의사항!

**11일차 주요 목차**
ㅁ toy project
ㅁ Map, stack, Queue
ㅁ Exception
ㅁ IO