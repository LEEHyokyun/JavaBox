ㅁ Inheritance(review)
	ㅁ 별도의 super를 명시하지 않으면 자동으로 superclass 생성자 호출(super)
	ㅁ 최상위 클래스에서 상속관계가 없다면 최상위 Object class를 상속(Object 생성자 호출)
	ㅁ 부모객체생성이 가장 먼저, Constructor > super 작성도 가능(논리적으로 super 생성이 먼저 되도록 작성필요)

ㅁ 명시적으로 super를 호출해야하는 경우
	ㅁ 자식에서 자동적으로 호출하는 (인자없는) 형태의 생성자를 부모에서 생성(즉, 오버로딩)하는 경우
	ㅁ 자식클래스에서 그대로 명기하여, 부모생성자에 알맞은 매개변수를 전달하여 생성하는 경우
		ㄴ 부모 생성자를 명시해줘야 하며, 전달인자는 부모변수까지 반드시 포함해주어야 한다.
		ㄴ 객체 생성시 상속받았을 경우 "참조하는 것이 아니라, 독자적인 heap 메모리에서 객체 자체적으로 저장한다"
	ㅁ sub class에서 생성자를 명시하지않는다면, 부모 class의 기본생성자(매개변수없는) 호출시도
		ㄴ 부모 생성자의 매개변수가 존재한다면 컴파일 에러 발생
		ㄴ 그렇기 때문에 생성자를 정확히 명시할 필요가 있다.
	
ㅁ Method Overriding
	ㅁ 부모를 상속받았을때, 부모 메소드를 자신에 맞게 재정의하여 사용하는 방법을 의미
		* 자식객체의 용도에 맞게 구현부를 업데이트, 재정의하여 사용한다.
		* 오버로딩은 동일한 이름의 메소드를 매개변수로 다양화하여 사용하는 것을 의미!
	ㅁ 오버라이딩을 사용하는 목적
		ㄴ 토끼, 호랑이가 동물 class(먹다)를 상속받았을때, 그 "먹다"를 각자 다르게 정의하는 것이다.
		* 사용자 입장에서는, 별도의 메소드를 만들지 않으면서, 구현부만 변경하도록 하여 표준적이고 간결한 메소드를 사용할 수 있도록 한다.
		ㄴ template pattern design 및 설계의 기초가 되는 개념이다.
			ㄴ 부모의 method까지 사용하고 싶다면 super을 이용한다.
	ㅁ 반드시 해당 부모 메소드의 return, parameter가 모두 동일해야 오버라이딩한다고 정의할 수 있다.
		ㄴ return paratmeter, 메소드 명 모두 동일해야 한다.
		ㄴ 접근제어자는 부모에서 선언한 것에서 좁아지면 안된다(넓어지는 것은 상관X).
	※ return 인자에 직접적으로 super.instance, super.method 등 기재가 가능하다!
	ㅁ 부모생성자를 통해 변수설정, 메소드 오버라이들르 해도 자신의 변수로 설정된 객체!

ㅁ java.lang.object
	ㅁ 모든 class의 최상위 class이자 부모 class
		ㄴ 별도 상속표현이 없다면 Object class는 기본상속된다.
		ㄴ "객체"라면 "기본적으로 있어야 하는 기능들".
	ㅁ getClass
		*Obejct class method
		* 해당 "객체"가 어떤 "class"로 부터 생성된 class인지를 반환
	ㅁ toString
		* 해당 객체의 주소값
		* 객체 자체를 print하여도, 내부적으로 toString를 호출하여 주소값 return, 동일한 결과가 도출된다.
	ㅁ toString 메소드의 오버라이딩 사용
		ㅁ key point : 객체의 주소값이 아닌, 속성정보를 return 받는다.
			ㄴ step 1
				class 내부적으로 toString 메소드를 override(재정의)
				//toString을 활용하여 해당 객체의 속성정보를 return
				public String toString() {
					return menu;
				}
			ㄴ step 2
			System.out.println(f.toString());
			System.out.println(f);
			//f 호출시 내부적으로 toString 메소드 호출
			//해당 메소드는 오버라이딩하여 재정의하였음
			//return menu를 통해 해당 객체의 속성값을 return
		ㅁ 객체만을 활용하여 자체적인 속성정보를 얻어올 수 있도록 toString overriding 활용가능!
			ㄴ 상속받았을경우, super를 사용하여 부모객체의 속성정보에도 접근가능하다.
	
ㅁ Polymorphism(다형성)
	ㅁ 하나의 메세지(인터페이스) 방식으로, 다양한 객체들이 각자의 방식으로 다양하게 동작하는 성질을 일컫는 개념
	ㅁ 선행조건이 필요하다.
		ㅁ 계층구조(hierarchy)를 형성하여 다형성 적용환경을 제공해야 한다.
			ㄴ 상속(Inheritance)
	ㅁ 참조변수는 다양한 객체를 참조할 수 있다.
		ㄴ 부모 타입의 변수에 다양한 자식 객체를 참조할 수 있다.
			ㄴ Animal a = new rabbit();
	ㅁ 다형성의 특징
		ㅁ point : "다양한 자식객체를 활용해야 하는 상황에서, 하나의 인터페이스 만으로도 다양한 객체를 사용할 수 있다, 여러 결과 출력가능하다."
		ㄴ 예제
		 //기존 - 각 객체 datatype마다 method 정의...결합도가 높아진다.
		//public void buy(Food f)
		//public void buy(Computer c)
	
		//개선후, 다형성이 적용되는 형식으로 하나의 메소드로 통합 정의 가능.
		main class)
		public void buy(Product p) {
			System.out.println(p.getClass().getName());
		}
		ㄴ 즉, 부모객체로부터 매우 다양한 객체들이 생성되는 상황에서
		   위와 같이, 자식객체들의 datatype에 따른 메소드를 일일이 main에서 정의할 필요없이
		    즉 하나의 인터페이스로 다양한 객체가 각자의 방식으로 동작하게 할 수 있는 도구이다.
		service.buy(new Food());
		service.buy(new Computer());
		ㅁ 부모 datatype의 참조변수가 자식객체를 참조하는 방식의 업캐스팅.
		ㅁ 말 그대로 다양한 형태, 한 부모에서 수많은 다양한 자식 객체가 공유될때!
			ㄴ 하나의 소통방식, 인터페이스 방식!
			
ㅁ Object casting(객체 형변환)
ㅁ static, final, abstract, interface

**7일차 주요목차**
ㅁ Polymorphism
ㅁ instance of 연산자
ㅁ Object casting