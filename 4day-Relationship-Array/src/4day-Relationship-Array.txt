**4일차 주요 목차**
ㅁ Class Diagram의 relationship
	<Realtionship의 관계와 매개변수를 통한 객체전달 모두 중요함!!>
	ㅁ tool : staruml 설치
	ㅁ Relationship : "얘(소유대상)"가 "얘(소유한 측)"한테 이런 관계에 있다.
	ㅁ use a <일시적 소유, "지역변수">
		ㄴ association, 사람이 렌트카를 사용한다.
		ㄴ ex) Person -> car
			* Person이 car를 사용할 수 있는 관계이며,
			* 일시적 사용, 즉 특정 메소드안에서만 car class를 활용한다.
			* 메소드 종료시 car 객체는 메모리에서 해제된다.
	ㅁ has a <반영구적 소유, "인스턴스 변수">
		ㄴ aggregation, 사람이 스마트폰을 소유해서 사용한다.
	ㅁ consist of <필수적 구성요소, "생성자">
		ㄴ composition, 사람의 구성요소 "뇌" (전속, 구성)
	* 아래로 내려갈수록 긴밀도가 높아진다.
	ㅁ 보통 소유대상, 필요한 것을 먼저 생성한다!
	
	ㅁ OOAD, Obejct Oriented Analysis and Design(객체지향분석설계)
		ㄴ 설계는 class diagram, 분석은 Usecase diagram!
ㅁ array(배열)
	ㄴ 한 class가 여러개의 class, 즉 has many class의 관계를 가질경우
	ㄴ 별도로 하나하나의 객체를 만들수 없을때!
	ㄴ 다수의 데이터를 효과적으로 저장하고 관리하기 위한 방법으로 일종의 객체!
	
	ㅁ 기본형 daa를 저장하는 배열
	 	ㅁ 배열선언 / int[] age = int age[];
	 		ㄴ int[] age = new int[3];
	 	ㅁ 배열 생성 / age = new int[3] //3개의 공간을 가진 배열 생성
	 		ㄴ 객체의 일종!
	 		ㄴ 각 공간에서의 최초 초기화값은 0이다.
	 	ㅁ 각 배열의 공간에 요소 할당 age[2] = 24;
	 	※ 선언 - 생성 - 할당 동시에 : int[] age = {1, 2, 3, 4, 5};
	 	
	 	ㅁ Runtime 설정에서 run configuration, cmd창에서의 main 인자전달도 가능!
	 	
	 ㅁ Reference DataType 데이터를 저장하는 배열(객체저장)
	 	ㅁ 베열선언 / Person[] pa;
	 	ㅁ 배열생성 / pa = new Person[3];
	 	ㅁ 배열요소할당 / pa[i] = new Person("아이유");
	 		ㄴ 각 배열요소는 Person datatype의 객체(의 주소값)이 할당됨에 유의!
	 			ㄴ sysout(pa[0].getName()) --> pa[0]에 할당된 객체의 Name
	 			ㄴ 즉, pa[i]는 객체의 주소값을 가르키므로, 내부적인 요소 출력을 위해선 pa[i].getName 등의 메소드 활용이 필수!

***5일차 주요 목차***
ㅁ array(배열)
ㅁ 오버로딩(Overloading)
ㅁ Inheritance(상속)
ㅁ 오버라이딩(Overriding)