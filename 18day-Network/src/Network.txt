ㅁ 네트워크
	ㅁ client, server로 구성되는 데이터 전송 체계
		ㄴ server의 IP은 고유한 위치값, Port는 다양한 값을 가질 수 있는 서비스값
			ㄴ client socket(통신주체)은 server ip, port를 기반으로 만들어진다.
			ㄴ servercokect이란 접수창구에서, port를 기반으로 다수 client를 받기위해 accpet 및, 접수후 통신할 객체를 생성한다(socket).
			ㄴ 서로 만들어진 client/server의 socket끼리 소통 및 통신하게 된다.
	ㅁ 통신규약을 기반으로 데이터 전송이 이루어진다(TCP/IP or HTTP 등).
	
ㅁ TCP/IP 기반의 네트워킹
	ㅁ java.net.ServerSocket, java.net.Socket 클래스를 이용한 socket간 소통
		ㅁ Protocol - 프로토콜, 약속, 통신규약
		ㅁ TCP/IP
			ㅁ TCP : Transmission Control protocol, 전송제어 프로토콜, 데이터 전달을 보증하는 규약의 일종
			ㅁ IP : Internet protocol, ip address를 통해 local PC의 고유 위치값을 확보.
				* ipconfig (cmd에서 ip address를 알 수 있는 명령어)
			ㅁ DNS : Domain Name System, IP주소와 1:1 연결되어, 사용자들이 쉽게 해당 주소에 접근할 수 있도록 문자열로 되어있는 주소를 일컫는다.
		ㅁ Port - 가상의 연결단위, 서비스 번호, 입구
			ㅁ IP주소가 유일한 상태에서, 다양한 경로(port)를 통해 해당 IP로 접근할 수 있다.
		※ https://129.0.0.1:8888
			ㄴ protocol - IP - port
		ㅁ socket - 네트워크 연결의 양끝단위(end point), 통신을 위해 필요한 인터페이스 객체.
			ㄴ client에서 Socket socket = new Socket(server ip, port)로 초기화
				* server ip가 존재하지 않는다면 exception 발생
				* socket.getInputStream / socket.getOutputStream으로 각각 socket을 통한 입력, 출력
			ㄴ server에서는 serversocket으로 접수창구를 운영, 통신서버를 구현하기 위한 객체.
				* client socket과 서로 연결되어 있어야 통신가능
				* ServerSocket socket = new ServerSocket(port)로 초기화
					ㄴ server의 ip주소는 이미 유일, 설정되어있는 상태로, 어떤 서비스 포트를 통해 통신할 것인지를 정의.
				* 그 후 대기하다가, 개별 클라이언트가 해당 port로 접속하게 되면, 해당 클라이언트와 통신하기 위한 객체이자 통신주체인 socket이 반환된다.
				* 반환된 통신주체가, 클라이언트의 socket 객체와 서로 연결되어 통신이 가능해지는 것이다.
					ㄴ Socket socket = ServerSocket.accept(), accpet()메소드를 통해 통신할 socket 객체 구체화.
					ㄴ socket.getOutputStream()으로 출력, socket.getInputStream()으로 입력
	ㅁ 1. 서버는 클라이언트의 접속을 대기, 클라이언트가 접속하면 socket 생성 및 서버는 클라이언트에게 메세지 출력
			클라이언트는 그 메세지를 입력받아 화면에 출력
				ㄴ 서버: ServerSocket(port) , ServerSocket.accpet(), getOutputStream(), close()
				ㄴ 클라이언트: 					socket생성,				getInputStream(), close()								
	ㅁ 2. 서버는 다수의 클라이언트에게 메세지를 서비스할 수 있도록 step1의 서버를 업데이트한다.
		* while(true), 즉 클라이언트가 접속을 하는 상황에서는 연결을 지속한다.
			ㄴ NetServer2는 서버소켓생성, 소켓.accpet 부터 소켓 및 PrintWriter 모두 close될때까지 계속 실행한다.	
	ㅁ 3. 2까지 완성된 Server에서, NetServer는 NetClient가 보낸 메세지를 입력받아 자신의 콘솔에 입력한다.
		* NetClient가 NetServer에 접속해서 그 메세지를 출력(전송)한다.
	ㅁ 4. 다수의 client로 부터 다수의 메세지를 입력받아, server는 이를 출력한다.