ㅁ interface
	ㅁ UI, API.
	ㅁ 사용자는 하나의 인터페이스만 알고있어도, 내부적으로 다양한 계층구조 형성을 통해 구현체, 객체 등을 모두 이용할 수 있다.
		ㄴ사용자가 유일하게 활용하는 부분은 interface, 내부적으로 기능 implement는 구현체를 통해.
		ㄴ 상속적 연관성은 없지만, "기능적 연관성"이 있을때
		ㄴ 각 implementation은 상속관계가 없어도, 기능적 연관성이 있다면 하나의 interface로 UI를 구성
	ㅁ 단순히 상속관계가 아닌, 기능적 연관성을 통해 계층구조를 형성할 수 있기 때문에, 다양한 계층구조를 형성할 수 있게 된다.
		ㄴ 그만큼 다형성 적용, 즉 "재사용성"이나 효율성 측면에서 관리가 용이해진다.
		ㄴ java는 단일상속, 단일계층의 구조이지만 interface를 활용하게 되면 그만큼 다양한 계층구조를 가질 수 있다.
		ㄴ 어떻게 보면 다중상속의 효과를 가진다.
		* 참고로 java.util package에서 많이 사용하는 interface가 있음.
	ㅁ 서비스를 구현한 측과, 서비스를 사용하는 user간의 약속(일종의 API).
		ㄴ 다양한 구현체의 구현 내용을 몰라도, 인터페이스만 이해하면 사용이 가능하다!
	ㅁ 내부적인 구현체 구현 내용이 업데이트 되어도, 인터페이스는 그대로이므로 사용하는 측에서는 그대로 인터페이스만 사용하면 된다.
		* 결합도가 낮아진다.
	ㅁ 일반적으로 인터페이스는 public static final 상수와 public abstract method로 구성된다.
		ㄴ 즉, 일반적인 abstract class와는 달리 "인스턴스 변수나 메서드를 가질 수는 없다".
		ㄴ 단 static 및 default method까지는 지원가능(jdk 1.8이상), 상속하여 사용할 수 없음.
	ㅁ public interface Flyer{
			String ID = "Hello"; //자동으로 public static final 인식
			public void eat(); // 자동으로 abstract 인식
		}
	ㅁ interface는 상속의 개념이 없으며, implements로 표현한다.
		* 반드시 이를 구현하는 class가 abstract method를 오버라이딩(구체화)해야 한다.
		* metaspace에 저장되는 final 상수는 재할당불가!
		* implements, 즉 구현은 다중구현가능, 상속(extends)은 단일상속
		public class Bird extends Animal implements Flyer{
			public void eat(){
			}
		}
	ㅁ 인터페이스는 계층구조만 생성하는 것이 목적!
		ㄴ 자동적으로 static final 상수로 attribute 생성(인스턴스 변수 명기 불가)
		ㄴ 자동적으로 abstract method 생성(인스턴스이지만, 자체적인 객체로써의 메서드 명기 불가)
	ㅁ 인터페이스는 계층구조, 상위 인터페이스라 지칭한다(부모가 아니다).
		* 사용법을 구현하는 것이 목적이다.
	ㅁ main에서 Datatype은 인터페이스, 실제 형성하는 객체는 자식객체(implementation)
		ㄴ 사용자는 인터페이스의 "사용법"만 익힌다면 메서드 활용 가능!
		ㄴ 실제 호출하는 메서드는 자식객체가 오버라이드(구체화)한 메서드!
	ㅁ Flyer[] f = {new ..}; .. interface도 마찬가지로, 객체배열로 생성 가능하다!
	ㅁ UML class diagram > interface realization으로 표현가능
	ㅁ 상위 인터페이스를 매개변수 인자로 받고, 해당 오버라이딩 메서드를 사용가능!
	
ㅁ 객체지향주요개념
	ㅁ Encapsulation, Inheritance, Polymorphism
	ㅁ abstraction : 필수요소만 공개하고, 불필요한 요소는 은닉.
		ㄴ 사용하는 사용자 중심으로, 꼭 필요한 요소들만 공개하되, 불필요한 세부요소는 공개하지 않는다.
		ㄴ 세부적인 해산물피자, 감자피자 등은 숨기고 makerPizza라는 단일 service만 공개
		ㄴ Flyer interface의 fly()요소는 공개, 세부적인 비행기나 새 요소는 공개X

ㅁ interface rules
	ㅁ java는 단일상속, interface는 multiple implements
		ㄴ 상속은 색깔, 정체성의 개념이고 interface는 기능적 공통성의 개념
	ㅁ 상속(extend), 구현(implement)는 동시에 작성이 가능하다
		ㄴ implement, 다양한 계층구조가 형성
	ㅁ 형변환(Datatype은 부모 class 및 interface 참조 및 자식객체(구현체) 생성) 가능
	ㅁ subEx가 Ex를 상속받았을때, subEx는 Ex와 마찬가지로 Ex의 부모클래스와 상위 인터페이스를 그대로 상속(구현)받는다.
		ㄴ 부모클래스의 기능과 성질, 인터페이스의 기능들을 그대로 물려받는다.
		ㄴ *다만, subEx의 부모가 상위 인터페이스, 부모 클래스의 기능을 구현(혹은 구체화)하였다면, sub에서는 또 따로 구현할 필요는 없다.
			ㄴ 그렇지만 sub이 overriding 할 경우, 해당 오버라이딩 메소드를 따를 것이다.
	ㅁ abstract(부모) class는 인스턴스 변수나 메소드 선언(구체화까지) 구현 가능
		ㄴ * 반면 인터페이스는 abstract method, static final variable만 가능
	ㅁ interface도 마찬가지로 "object down casting"이 가능하다.
		ㄴ 즉, interface를 구현한 자식객체 고유의 메소드를 object down casting을 통해 실행가능하다.
	ㅁ interface 간의 다중 상속(extend) 가능하다!
		* 이 다중상속한 interface를 구현받은 class는 해당 interface와 함께, 모든 상위 interface까지 구현해야한다!

ㅁ interface vs abstract
	interface		abstract
		직접객체화불가
		abstract method를 통한 하위 자식 클래스에서 구체화(구현)
	다양한 계층	단일계층
	instance X		instance O
	메서드 구현X	메서드 구현O
	* jdk 1.8이상에서는 def	ault, static method 지원, 1.9이상에서는 private까지 지원
	* 인터페이스가 최상위 추상화 계층구조, 그 아래 abstract class로 설정하여 구성한다.
	* "가장 높은 추상화레벨, 기본설계도 - interface" "재사용성까지 고려, 미완성설계도 - abstract"

ㅁ interface에서의 default, static method
	ㅁ "기능이 추가될때", 이런 제한적인 상황에서 유지보수측면에서 필요에 의해, default 및 static method 추가를 지원한다.
		ㄴ 다만 static의 경우 마치 전역변수와 같이 작동하므로, class 변수로써 작용한다는 점에 유의
	ㅁ 특히 널리 쓰이는 오픈소스, 표준규약에 대해 사용법에서의 추가기능이 생겨날 경우!
		* default method를 추가해줌으로써, 새로운 기능을 추가할 수 있다.
		* 메서드를 구체적으로 정의하는 것 까지 가능함(이게 핵심)
			ㄴ 유지보수 목적에서 default method는 메서드 정의까지 가능하며, 물론 오버라이딩까지 허용한다.
	ㅁ default, static method 모두 interface 내부적으로 자체 메소드 정의가 가능하다!
	ㅁ interface의 static method도 마찬가지로, interface.static와 같이 접근!

ㅁ java.util.Collection(Collection 계층구조의 최상위 interface)
	ㅁ Collection 계열 API는 다양한 데이터를 효과적으로 제어 및 관리하기 위한 프로그램의 모음이다.
		ㄴ library > 재사용이 가능한 프로그램 모음으로, 말 그대로 이에 대한 도구를 사용해 해당 기능을 사용할 수 있다.
	ㅁ set, list, map.. 모두 interface의 일종이며, 상위 interface인 Collection의 method를 상속받는다.
		ㄴ Collection은 java의 자료구조를 나타내는 interface이다.
			ㄴ 자료구조? 리스트 원소 추가, 제거 등의 기능을 지칭
			ㄴ 참고로 Collection interface 하위구현체(class), 하위인터페이스(interface) 매우 다양하게 존재한다.
	ㅁ "자료구조에서 이정도 기능은 있어야 한다"는 기본 기능 명세서
		ㄴ Set, List는 이를 그대로 상속받되, 각자 특성에 따라 기능적 차이가 존재한다.
	ㅁ Set
		* public interface Set extends Collection
			ㄴ 말그대로 Collection interface의 method 모두 상속받는다, 즉 해당 method를 모두 사용할 수 있다.
			ㄴ 중복은 인정하지 않고, 정렬한다(인덱싱X)
		* 하위 구현체(class)로 LinkedHash(중복인정X, 등록된 순서 보장)와 TreeSet(중복인정X, 정렬기능내장)이 있다.
		ㅁ java.util.LinkedHashSet 
			* set.add(), set.clear(), ..
			* 이때 Generic으로 요소 type을 지정해줄 수 있다(권장)
		ㅁ java.util.TreeSet
			* 정렬기능제공 - 객체(set, toString() 오버라이딩 되어있음)
			* add(), clear() 등 기본적으로 제공
	ㅁ List
		* public interface List extends Collection
			ㄴ 말그대로 Collection interface의 method 모두 상속받는다, 즉 해당 method를 기본적으로 모두 사용가능하다.
			ㄴ 인덱스로 관리가 가능하며, 인덱싱하여 보관한다.
		* 하위 구현체로 ArrayList가 있다.
		
ㅁ Java 자료구조(Collection, Set, List)