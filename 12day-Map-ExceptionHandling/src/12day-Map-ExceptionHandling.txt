ㅁ java.util.Map
	* map.put, map.remove,..
	
ㅁ java.util.Stack, java.util.Queue
	ㅁ stack
	* class, List 계열로 last in first out.
	*stack.push/stack.pop()
	ㅁ Queue
	* class, (Linked)List 계열로 first in first out
	* queue.add/queue.poll()
	※ Linked 구조는 각 요소가 서로에게 연결 및 참조하고 있으므로, 요소 추가 및 삭제에 용이하다!
	
ㅁ java Exception, Handling(예외처리)
	ㅁ 말 그대로 예외적인 상황, 회원가입에서의 id중복이나 손상된 파일을 load할때나 네트워크 연결이 비정상적일때 등..
	ㅁ 즉 프로그램을 실행할때 예외적인 상황이 발생하였을때, 대안흐름을 수행하고 프로그램을 정상수행하기 위한 방안의 일종이다.
		* 실행의 주체인 JVM은 Exception 발생시 원래는 Exception 상황이 발생한다면 해당 메시지르 출력하고 프로그램을 즉시 종료시킨다.
		* Exception 처리를 하게 된다면, <강제종료>가 아닌, 그에 대한 대안을 수행하도록(프로그램 정상실행까지) 유도할 수 있다.
	ㅁ 유스케이스 시나리오 대안흐름
		* 말 그대로 대안흐름에 대해 구체적으로 작성 및 명기한다.
	ㅁ 핵심용어 
		ㅁ Call Stack Mechanism
			ㅁ try : Exception 발생 예상 지점 영역을 지정
			ㅁ catch : Exception 발생시 대안흐름 정의
			ㅁ finally : 예외상황의 발생유무에 상관없이 반드시 수행한다.
			ㅁ throws : Exception 발생시 호출측으로 Exception 전달
			ㅁ throw : Exception 발생조건시 Exception 발생(인위적 발생)
	ㅁ 다수의 Exception 상황에 대해 try block에 기재하여도, 가장 먼저 발생한 Exception, 즉 Exception 발생 즉시 catch 문을 실행한다.
		* 예외상황은 구체적으로 각각 개별적 정의를 권장한다(다형성을 적용한 Exception 정의는 권장하지 않는다).
		* Excpetion 처리가 없거나, 실제 발생한 경우와 다른 경우엔 예외처리 없는 것과 같은 효과를 지닌다.
	ㅁ Exception/throw
		ㅁ Exception은 보통 프로그램적으로 해결가능한, 단순오류 발생상황에 대해 사용한다.
		ㅁ throw은 보통 serious error, 프로그램적으로는 해결 불가능한 심각한 오류에 대해 사용한다(발생측에게 exception 전달).
	ㅁ Exception의 try 처리는 발생예상지점과 실행지점 모두 포괄할 수 있도록(업무단위로) block화.
		※ 예외처리를 구성하는 기준은 작업반경
		try {
			int ageNum = Integer.parseInt(age); //Exception 발생지점
			System.out.println(ageNum); //실행지점
			/*
			 * Exception try 처리는 발생예상지점과 실행지점 모두 포괄하도록!
			 */
		}
	ㅁ ★ Exception 처리가 되지 않는다면, try-catch-finally를 제외한 main 구문은 실행되지 않는다.

ㅁ throws
	ㅁ 예외처리 대부분에서 사용하는 기법, Exception 처리를 "발생원인", 즉, 그 예외메소드를 "호출한 측"에게 전달한다.
		ㄴ throw는 말 그대로 "전파" "던진다" -> 최종적으로 전파받은 측에서 반드시 try-catch(예외처리)해주어야 한다.
		ㄴ serious error
	ㅁ  메소드 단위적으로, 예외발생상황을 예상하고 throw 구문을 작성하게 된다면, **해당 메소드를 호출한 측(클래스 혹은 객체)으로 예외상황을 throw, 즉 전달한다.
		* 해당 메소드를 호출한 측은 반드시 이 예외상황에 대한 try-catch 처리를 해주거나
		* 다른 상위 클래스로 해당 예외처리를 넘겨주는 throw 처리를 해주어야 한다.
	ㅁ main에서 throw를 할 경우, JVM측으로 exception을 throw하여, 후속작업이 진행되지 않는다(예외처리진행불가).
		* 따라서 main은 최상위 클래스로써 try-catch로 처리하는 것을 권장.
	ㅁ checked exception 은 throw 구문이 반드시 필요, unchecked exception은 반드시 필요하진 않음(Runtime exception)	
		* Exception 계열의 자식 클래스인 Error, Excpetion이 존재하고, 이때 Exception의 자식 클래스는 checked, unchecked로 나뉜다.
		*  RunTime Exception(Unchecked)를 제외한 모든 예외 클래스에 대해선 생성자와 메소드에서 예외 전파(throw)를 명기해주어야 한다.
			ㄴ 즉 Checked Exception을 사용하는 클래스에 대해서는 반드시 생성자나 메소드에서 throw를 명기해준다
		*  Unchecked Exception(Runtime)에 대해서는 별도의 throw를 명기해주지 않아도, 자동적으로 throw(전파)를 실행하므로,
		   해당 메소드를 사용한 클래스에 대해서만 유의해주면 된다.
		ㄴ throwable 의 sub class(Error, Exception)이 존재하고, 이때 Error는 보통 serious / Exception은 보통 minor을 의미한다.

ㅁ throw
	ㅁ exception의 고의 발생, 사용자가 정의하는 exception이다.
		* exception class를 상속받아 사용하면 된다.
		* 필요시 정의하는 Exception, 특정조건을 만족할때해당 Exception이 발생한다.
		* 즉 쉽게 말하면, Exception class를 상속받아 Exception class를 정의해주는 키워드를 일컫는다.
	ㅁ Exception class를 super를 통해 호출 및 이를 재정의, 즉 사용자 정의 Exception에 맞게 정의하여 사용한다.
	ㅁ 예외상황이 발생할 경우, new를 통해 exception 객체가 생성되고, 그 후 throw 및 throws 실행한다(즉, 해당 메소드를 실행한 곳에 exception을 전파한다).
	ㅁ Exception 객체가 생성된 후에 fianlly 구문이 실행되고, 그 후에 thorws를 실행함에 유의한다.

※ 입출력관련, system.in 처럼 입력 스트림을 사용했다면 반드시 Scanner.close()를 해주어야 한다.
※ s.close()는 finally 구문에 작성해준다.	