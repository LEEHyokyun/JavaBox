**school project map/exception handling**

- requirements
	ㅁ 학교구성원 정보를 관리하는 시스템 구축
	ㅁ VO - 학교 구성원 정보는 학생(Student), 교사(Teacher), 직원(Employee)로 구성
		ㅁ 학생(VO1) : 전화번호(tel), 이름(name), 주소(address), 학번(stuId)으로 구성된다.
		ㅁ 교사(VO2) : 전화번호(tel), 이름(name), 주소(address), 과목(subject)으로 구성된다.
		ㅁ 직원(VO3) : 전화번호(tel), 이름(name), 주소(address), 담당부서(department)으로 구성된다.
	ㅁ service - 주요기능
		ㅁ 구성원 정보를 등록
			* 학교 구성원 정보를 등록하여 유지 -> LinkedHashMap을 활용한다.
			* 등록시 등록순서를 보장하고 전화번호는 구성원당 유일해야 하므로, 중복된 전화번호 구성원일 경우 등록시키지 않는다.
		 	* 중복시 등록 불가능 메시지는 "01012341234 tel이 중복되므로 등록 불가합니다."
		 	※ Exception 처리 : DuplicateTelException 정의 및 SchoolService의 addMember method에서 throw/throws + 최종적으로 main에서 try-catch
		ㅁ 전체 구성원 리스트를 화면에 출력
			* 각 구성원의 상세정보가 모두 출력된다. -> map의 values를 iterator로 순회 및 출력한다.
		ㅁ 전화번호(tel)를 이용한 구성원 정보를 검색
			* 검색할 구성원 정보의 전화번호를 전달하면, 해당 구성원의 정보가 출력(반환)된다.
			* 만약 전화번호에 해당하는 구성원 정보가 없으면, null을 출력(반환)
			※ Exception 처리 : 만약 구성원 map에 존재하지 않는 구성원 전화번호를 전달하였을 경우
			   MemberNotFoundException 발생 및 호출한 측에서 이를 메세지로 보여준다- "0101231234 tel에 해당하는 구성원 정보가 없습니다."
		ㅁ 전화번호(tel)를 이용한 구성원 정보를 삭제
			* 삭제할 구성원 정보의 전화번호를 전달하면, 리스트에서 해당 구성원 정보를 삭제
			* 만약 전화번호에 해당하는 구성원 정보가 없다면 메시지 출력
				ㄴ 메시지 : "01012341234 tel에 해당하는 구성원 정보가 없어 삭제 불가합니다."

- process : 요구분석 후 설계
	ㅁ 요구사항에 대한 분석
	ㅁ 설계(UML class diagram)
	ㅁ 주요 클래스에 대한 클래스명, 인스턴스 변수명, 핵심기능(메서드)
		ㄴ constructor, getter/setter 등은 생략가능
	ㅁ 각 method에서 공통된 기능이 있다면, 이를 별도로 구성하는 것을 고려한다.
		
- refactoring
	ㅁ 결과의 변동없이, 코드의 내부구조를 재조정하는 작업
	ㅁ 가독성을 높이고 유지보수성을 향상시킨다.
	
	ㅁ 주요 메소드 내부에서 공통적인 로직이 반복되어 있을 경우
		* 공통 로직을 별도의 메소드에서 정의하고, 해당 기능을 각 메소드에서 재사용하도록 재조정
			ㄴ findIndexByTel(tel) : Int .. 구성원 존재시 해당 요소의 인덱스를, 존재하지 않는다면 -1 반환 이런 방식으로 구성
	ㅁ TDD기법, test case를 별도로 구성하여 해당 기능을 test한 후 다른 메소드에 적용
		* 실행부(main, testcase 별로 실행부를 나눈다)와 구현부(기능 구현)을 나누고, 최종적으로 구현부는 service로 병합
		
