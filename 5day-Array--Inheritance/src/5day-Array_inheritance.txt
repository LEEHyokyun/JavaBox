ㅁ array(배열)
	ㄴ 참조형 배열 : Person[] pa = new Person[3]; 
		ㄴ 생성, 할당 동시에 : Person[] pa = { new Person("A", 20), ..}
		ㄴ 전달인자, 매개변수도 역시 마찬가지로 datatype 반드시 확인!

ㅁ 2차원 배열
	ㅁ 기본 생성
		* 2차원 배열 생성 - int[][] array = new int[3][12]
		* 2차월 배열 할당 - array[1][4] = k;
	ㅁ 각 행별로 열의 크기가 다를 경우
		* 생성1 : int[][] school = new int[3][];
		* 생성2 : 각 행마다 열을 별도로 정의!(school[0] = new int[3];..)
		※ 다차원 배열이 heap에 저장될 때, 각각 배열주소값을 참조한다!
		※ 각 행별 배열의 길이는 달라진다. 

ㅁ class는 자신의 역할에 따라 분류할 수 있다.
	ㄴ 하나의 클래스는 하나의 역할만!!(응집도는 높이고, 결합도는 낮게)
		ㅁ VO, value obejct - 값을 저장하는 객체
		ㅁ DAO, data access obejct - database에 접근하는 객체(SQL)
		ㅁ service - 트랜잭션 정의하는 객체(=일, 기능을 하는 객체)
		ㅁ DBC, database conntected
			ㄴ 회원가입을 위한 member DB 관리시,
				ㄴ member 정보저장 : memberVO
				ㄴ member DB접근 : memberDAO(*SQL)
				ㄴ member 로그인, 회원가입 등 기능 : memberService
		*Controller - View : JS의 아키텍쳐 영역

ㅁ 오버로딩(Overloading)
	ㅁ 메소드명은 동일하지만, 다양한 인자(매개변수)로 구분하는 것을 의미
		ㄴ 그러한 프로그래밍의 기법
		ㄴ 사용자의 편의성을 위해(동일한 인터페이스로 다양한 데이터 전달)
	ㅁ 메소드 오버로딩
		ㄴ 	public void eat(){}
			public void eat(String menu){}
			public void eat(int count){}
			public void eat(int count, String menu){}
			public void eat(String menu, int count){}
			※ datattype이 같다면 같은 메서드로 인식
	ㅁ 생성자 오버로딩(다양한 정보로 객체 구성 가능)
		ㄴ 사용하는 측의 편의성을 증가할 수 있다.
		ㄴ class Peron{
				Person(){}
				Person(String name){}
			}
	
ㅁ Inheritance(상속)
	ㅁ 객체지향주요개념 
		ㄴ Encapsulation, Inheritance, Polymorphism
	ㅁ 부모(super) class의 멤버, 즉 instance variable/method를 "물려받아", 자식(sub) class가 이를 재사용하는 개념
		ㄴ 기본적으로 java에서 사용되는 모든 class는 object 객체를 상속받는다.
		ㄴ UML의 class diagram : is a relationship(generalzation)
			ㄴ 사람은 동물이다. 사람(자식, sub) -> 동물(부모, super)
			ㄴ 비서는 사원이다. 비서(자식, sub) -> 동물(부모, super)
	ㅁ 상속과정
		ㅁ sub class 정의 
			* (사람/나이/먹다, 공부하다)
			* (원숭이/나이/먹다, 나무를 타다)
		ㅁ sub class에서 공통된 속성과 기능을 정의하고, 이를 "일반화한다"
			* 사람과 원숭이 모두 나이를 먹는다.
		ㅁ 이 일반화한 개념에 기반하여 super class를 생성한다.
			* 이 super class 만드는 과정을 generalization이라 한다.
		ㅁ 그 후 이외 각자의 클래스 개인적인 속성, 기능은 사용하되, 공통된 부분들은 상속하여 사용한다.
	ㅁ 상속의 목적
		ㅁ super class 재사용에 따른 생산성 증가
		ㅁ super - sub 간의 계층구조(hierarchy) 생성, 다형성(다양한 객체생성이 신속하게 진행 가능) ↑
	ㅁ 키워드 "extends"
		ㅁ 부모를 상속받는 자식은 부모의 기능, 속성을 상속받아 사용 가능.
			ㄴ 자식은 부모객체를 포함한다.
		ㅁ public class sub extends super {}
			ㄴ ex) public class Person extends Animal{}
				ㄴ "super"은 공통, 즉 좁은 영역으로 super을 확장하여 sub를 만든다
				ㄴ sub가 더 큰 영역이며, 어떻게 보면 부모의 표현한계로 자식을(세부사항) 만든다.
				ㄴ Animal 부모 class를 확장하여 Person 자식 class를 생성한다.
				ㄴ 즉, 부모 animal의 모든 속성과 기능을 자식 class인 Person이 사용할 수 있다.
		ㅁ 상속받았더라도, 자식은 부모의 private member에는 접근할 수 없다(동일 class가 아니다).
			* 다만 부모의 public method나 인스턴스 변수들은
			* 부모 class의 객체생성없이도, 바로 사용가능하다(getter, setter 등)
	ㅁ single Inheritance, 오로지 단일 상속만 가능하다.
		ㄴ 코드의 신뢰성을 높이고, 객체의 정체성을 위한 목적.
		* 다중상속의 경우, java interface에서 활용한다.

ㅁ super 키워드
	ㅁ 부모를 가르키는 자바 예약어(*참고로, 현재 객체 자신을 가르키는 예약어는 this)
	ㅁ 사용방안
		ㅁ super.멤버(인스턴스 변수 및 메서드)
			ㄴ 자식클래스가 부모클래스를 상속받았을때, 부모의 public/protected 인스턴스 변수에 접근가능
	ㅁ new B(){ super() } -> 자식객체가 생성자 생성 및 객체 생성시, 자동적으로 부모생성자 호출 및 부모객체 생성
		ㄴ 기본적으로 객체가 heap에 적재되기 위해선 생성자가 먼저 호출되고, 정의 및 초기화가 되어야 한다.
		ㄴ 자식객체가 생성되기 앞서, "super", 즉 부모생성자를 호출하게되고 먼저 부모객체를 생성하여 heap에 완전 적재한다.
		ㄴ 그 후에야 "비로소" 자식 생성자가 완전히 정의되고 heap에 적재된다.
		ㄴ 최종적으로 참조변수 자식객체 참조변수 c가 이 자식객체를 참조하게 된다.
	ㅁ 자식객체의 생성자에서 super를 명기하지 않아도, 내부적으로 자동적으로 부모 생성자 호출키워드인 super() 호출됨.'
		ㄴ 다중상속을 한다면 불필요하게 부모객체가 계속 생성될 것..
	ㅁ 자식객체 내부의 super 키워드를 명기할 경우, 반드시 first statment로 명기할것.
	ㅁ 부모객체도 기본적으로 생성자 내부에서 자동적으로 "suepr" 호출한다.
		ㄴ extends 하여 별도의 상속관계가 없다면, 자동적으로 Object class를 상속받는다.
		ㄴ Object는 java의 최상위 클래스(java.lang.Object)이다.
	
ㅁ protected 접근제한자
	ㅁ 같은 패키지내에서만, 다른 패키지라면 상속하였을 경우에만 접근 가능.
	ㅁ 상속받았다면 부모클래스는 별도 객체생성없이, 바로 public과 함께 해당 메소드 사용가능
		ㄴ tip) 다른 package의 class라면 반드시 import 해주어야 사용가능.
	
** 6일차 주요 목차**
ㅁ Method Overriding
ㅁ java.lang.object
ㅁ Polymorphism(다형성)
ㅁ Object casting(객체 형변환)
ㅁ static, final, abstract, interface