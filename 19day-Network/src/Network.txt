ㅁ 네트워크
	ㅁ 1. 서버는 클라이언트의 접속을 대기, 클라이언트가 접속하면 socket 생성 및 서버는 클라이언트에게 메세지 출력
			클라이언트는 그 메세지를 입력받아 화면에 출력
				ㄴ 서버: ServerSocket(port) , ServerSocket.accpet(), getOutputStream(), close()
				ㄴ 클라이언트: 					socket생성,				getInputStream(), close()								
	ㅁ 2. 서버는 다수의 클라이언트에게 메세지를 서비스할 수 있도록 step1의 서버를 업데이트한다.
		* while(true), 즉 클라이언트가 접속을 하는 상황에서는 연결을 지속한다.
			ㄴ NetServer2는 서버소켓생성, 소켓.accpet 부터 소켓 및 PrintWriter 모두 close될때까지 계속 실행한다.	
	ㅁ 3. 2까지 완성된 Server에서, NetServer는 NetClient가 보낸 메세지를 입력받아 자신의 콘솔에 입력한다.
		* NetClient가 NetServer에 접속해서 그 메세지를 출력(전송)한다.
	ㅁ 4. 다수의 client로 부터 다수의 메세지를 입력받아, server는 이를 출력한다(클라이언트 순차적 입장).
		* console을 이용하여 메시지 입력, 이를 서버에서 출력
	ㅁ 5. server와 client의 1:1 양방향 지속 통신
		* client측 메시지 수신, 이를 server가 받아 client로 다시 전송
		* 기본적으로 통신은 지속, "종료" 전송시 server, client 종료
		* 1대1 통신이므로, accpet()는 한번만 실행(반복대상이 아님)
		* BufferedReader로 메시지 입력 및 client로 다시 재전송(출력)
			ㄴ 출력시엔 PrintWriter / socket.getOutputStream() 이용!
		* BufferedReader / PrintWriter 입출력 구조 자체는 server와 client가 동일하다.
	 		ㄴ client나 server를 종료하는 특별한 로직이 있는 것이 아니다.
	 		ㄴ 반복문 종료시 그냥 server, client 종료되는 것이다.
	 		ㄴ 통로만 만들어주고, 실질적인 입력/출력과정을 반복(while true)
	 		ㄴ **전체적으로 통로 및 socket 구성 - fianlly close를 구성하는 것을 먼저 진행한다.
	 ㅁ 6. 하나의 server에 다수의 client가 접속하여, 각자 지속적인 통신 유지(※ 채팅 직전 단계)
	 	ㅁ server 측에서 thread를 생성하고, 해당 thread에게 socket을 넘겨 통신이 가능하게 하는 것이 핵심이다.
	 	* client를 thread로 처리해서, server라는 process가 실행할때 다수의 thread가 동작하듯이 구성하면 된다. 
	 	* accpet()는 while(한명으로 끝이 아니므로)로 처리, accept()를 통해 반환받는 socket은 각각의 client thread가 server 프로세스에 의해 받는다.
	 	* 서버라는 프로세스 내부에, 여러개의 thread(client) 동작 및 생성
	 		ㄴ thread implements Runnable
	 	* thread의 실행은 server가 실행(start), socket을 건네주는 것까지가 key point.
	 		ㄴ server에서는..	socket = serversocket.accept()
	 		ㄴ ServerWorker(socket), 이 socket을 받아서 통신구성!
	 			ㄴ 참고로 이것이 server측에서 해야할 일이다, start 주체가 server 측에서 해야하는 일이므로
	 ㅁ 7. 최종작업, server에서 client가 보낸 메시지를 "모든 client에게" 보내는 과정이 핵심이다.
	 	
	 	